/*
 * Copyright 2018 The NATS Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cmd

import (
	"fmt"
	"io/ioutil"
	"path"

	"github.com/nats-io/jwt"
	"github.com/nats-io/nsc/cmd/store"
	"github.com/spf13/cobra"
)

func createLoadActivationCmd() *cobra.Command {
	var params LoadActivationParams
	var cmd = &cobra.Command{
		Use:   "activation",
		Short: "Load an activation token generated by a third party",
		RunE: func(cmd *cobra.Command, args []string) error {
			if err := params.Validate(); err != nil {
				return err
			}
			if err := params.Run(); err != nil {
				return err
			}

			cmd.Printf("Success! - loaded activation from %q\n", len(params.filePath))

			return nil
		},
	}
	cmd.Flags().StringSliceVarP(&params.filePath, "file", "f", nil, "file to input activation token from")
	cmd.Flags().BoolVarP(&params.overwrite, "overwrite", "", false, "overwrite tokens having the same jwt id")
	cmd.MarkFlagRequired("file")
	return cmd
}

func init() {
	loadCmd.AddCommand(createLoadActivationCmd())
}

type LoadActivationParams struct {
	filePath  []string
	overwrite bool
}

func (p *LoadActivationParams) Validate() error {
	for _, f := range p.filePath {
		if !IsReadableFile(f) {
			return fmt.Errorf("%q is not readable", f)
		}
	}
	return nil
}

func (p *LoadActivationParams) Run() error {
	s, err := getStore()
	if err != nil {
		return err
	}
	for _, f := range p.filePath {
		d, err := ioutil.ReadFile(f)
		if err != nil {
			return err
		}
		token := ExtractToken(string(d))
		ac, err := jwt.DecodeActivationClaims(token)
		if err != nil {
			return fmt.Errorf("error decoding activation %q: %v", f, err)
		}
		if err := s.Write(path.Join(store.Activations, ac.ID+".jwt"), []byte(token)); err != nil {
			return err
		}
	}
	return nil
}
